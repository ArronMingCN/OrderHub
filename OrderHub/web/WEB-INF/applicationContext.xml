<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd"

       >


    <!--
     <mvc:annotation-driven />
     -->
    <!-- load config.properties -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:config.properties</value>
        </property>
    </bean>
    <!-- 匹配数据源。？ -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，
        常用的插件有：
        监控统计用的stat 日志用的log4j 防御sql注入的wall -->
        <!-- -Ddruid.log.stmt.executableSql=true -->
        <!--
        <property name="filters" value="stat,log4j"/>
        -->
        <!-- 最大连接池数量 （最大并发连接数）-->
        <property name="maxActive" value="20" />

        <!-- 初始化时建立物理连接的个数.初始化发生在显示调用init方法,或者第一次getConnection时 -->
        <property name="initialSize" value="1" />

        <!-- 获取连接时最大等待时间，单位毫秒。
        配置了maxWait之后，缺省启用公平锁，并发效率会有所下降,如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="60000" />

        <!-- 最小连接池数量（最小空闲连接数） -->
        <property name="minIdle" value="1" />

        <!-- 有两个含义：
        1) Destroy线程会检测连接的间隔时间
        2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <property name="minEvictableIdleTimeMillis" value="300000" />

        <!-- 用来检测连接是否有效的sql,要求是一个查询语句
        如果validationQuery为null,testOnBorrow、testOnReturn、testWhileIdle都不会起作用 -->
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />

        <!-- 建议配置为true，不影响性能，并且保证安全性。
        申请连接的时候检测,如果空闲时间大于timeBetweenEvictionRunsMillis,
        执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />

        <!-- 申请连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
        <property name="testOnBorrow" value="false" />

        <!-- 归还连接时执行validationQuery检测连接是否有效,做了这个配置会降低性能 -->
        <property name="testOnReturn" value="false" />

        <!-- 是否缓存preparedStatement，也就是PSCache。
        PSCache对支持游标的数据库性能提升巨大,比如说oracle。
        在mysql5.5以下的版本中没有PSCache功能,建议关闭掉.5.5及以上版本有PSCache,建议开启. -->
        <property name="poolPreparedStatements" value="true" />

        <!-- 要启用PSCache,必须配置大于0,当大于0时,poolPreparedStatements自动触发修改为true.
            在Druid中,不会存在Oracle下PSCache占用内存过多的问题,可以把这个数值配置大一些,比如说100 -->
        <property name="maxOpenPreparedStatements" value="100" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 18000秒，也就是300分钟 -->
        <property name="removeAbandonedTimeout" value="18000" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
    </bean>
</beans>